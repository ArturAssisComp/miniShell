Version 1.0 [03/01/2022]
parser description:

The parser will process the output from the lexer to generate the objects 
containing the informations for each command and its modifiers. The output from 
the lexer is an array of tokens. The parser will process this array to check if 
it satisfies the grammar and to get the semantic information necessary to execute 
each command. The parser will generate a linked list of nodes containing 
independent command pipelines. Each element will store informations about the 
command, those informations are like its arguments, input stream, output streams, 
name, pointer to the next pipe command, flag that says if the command was executed, 
its returned status, etc. The output generated by the parser will be consumed by the 
command processor. 
    About new line ('\'): This token will not be sent to the parser. Each time
the lexer reads this token, the next line will be read in order to add the new tokens
to the array of tokens.


Parser design:
    The parser will be implemented as a recursive-descent parser. A LL(1) grammar 
will be used.

    - Pipeline: a pipeline is a data structure that stores the number of commands 
of the pipeline, a pointer to the first command, and a flag with its status 
execution saying if it was completed or not;
    - Command: each command is a data structure with the name of the command, the 
arguments, the output streams, the input stream, a pointer to the next command 
of the pipeline if there is any;
    - Pipeline Node: it is a data structure that stores a pointer to a pipeline and
a pointer to the next pipeline node. It composes the linked list that the command 
processor will receive as input;

/* Each terminal is equivalent to a token that could be read by the lexer. */
List of terminals: PIPE, ID, IN_REDIRECT, OUT_REDIRECT, BACKGROUND_EXEC, 
    COMMENT, EOF_TOKEN, (empty);

Grammar rules:
<token_array>      ::= <body> <comment_line> <end>

<body>             ::= <content> <modifiers> | (empty)
<content>          ::= <command_pipeline>
<command_pipeline> ::= <command> <next_command>
<next_command>     ::= PIPE <piped_command> <next_command> | (empty)
<command>          ::= <command_id> <resources> 
<command_id>       ::= ID
<resources>        ::= <argument> <resources> | <input_redirect> <resources1> 
                     | <output_redirect> <resources> | (empty)
/**
 * <resources1> is the non terminal that does not allow a new input redirect in 
 * order to avoid multiple input redirections.
 */
<resources1>       ::= <argument> <resources1> | <output_redirect> <resources1> | (empty)
<argument>         ::= ID
<input_redirect>   ::= IN_REDIRECT ID
<output_redirect>  ::= OUT_REDIRECT ID
/**
 * <piped_command> is a command that does not accept input redirect.
 */
<piped_command>    ::= <command_id> <resources1>

<modifiers>        ::= BACKGROUND_EXEC | (empty)

<comment_line>     ::= COMMENT | (empty)

<end>              ::= EOF_TOKEN


Predicting parsing table:
    The parsing table is represented in the file prediction_parsing_table.pdf




Legend:
    Non-terminals -> <name>
    Terminals     -> NAME
    Empty         -> (empty)
    or            -> |
    generates     -> ::=
    comment block -> /* block */
